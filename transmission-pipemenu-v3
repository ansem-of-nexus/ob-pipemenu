#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="/path/to/script /path/to/script 'connection info'" id="script-name" label="menu name"/>
#
declare -r download_limits=(0 10 100 1000)
declare -r upload_limits=(0 1 10 100)
#
# Don't edit past this line unless you know what you are doing
#
# help screen
function help_screen () {
  echo "Usage: pipemenu for openbox menu.xml"
  echo "  <menu execute=\"/path/to/script [options]\" id=\"menu id\" label=\"menu name\"/>"
  echo ""
  echo "-h (this screen)"
  echo "-c remote connection information"
  echo "-m seperate torrent information calls, to limit requests"
  echo "-t torrent id for recusive call"
  echo "-i id_header (id header and id_number of the menu this is called inside of)"
  echo "-r (telling script that is is being run inside of itself)"
  echo ""
  exit 0
  }
# making loops ignore spaces
IFS=$(echo -en "\n\b")
# setting variables and checking for them
declare script; script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
declare script_name; script_name="$(basename "${BASH_SOURCE[0]}")"
#if [ -z "$path" ]; then echo "path must be set with '-p /path/to/stuff'" && exit 1; fi
if [ -z "$id_header" ]; then id_header="m"; fi
# functions
function sanatize () {
  local input; input="$1"
  # sanatizing input
  input=("${input//</&lt;}")
  input=("${input//&/&amp;}")
  input=("${input//>/&gt;}")
  input=("${input//\"/&quot;}")
  input=("${input//\'/&apos;}")
  input=("${input//_/__}")
  echo "$input" ;}
function menu_id () { if [ -z "$id_number" ]; then id_number=0; else ((id_number++)); fi ;}
function mcall () {
  menu_id
  local label; label="$(sanatize "$1")"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo "<menu id=\""$script_name"_menu_id_"$id_header"-"$id_number"\" label=\""$label"\">" ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label; label="$(sanatize "$1")"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo "<item label=\""$label"\"><action name=\"Execute\"><command>" ;}
function iend () { echo "</command></action></item>" ;}
function separator () {
  if [ -z "$*" ]; then
  echo '<separator/>'
  else
  local label; label="$(sanatize "$1")"
  echo "<separator label=\""$label"\"/>"; fi ;}
function pcall () {
  # order of inputs is command arguments, then label, and then hotkey
  local label; label="$(sanatize "$2")"
  #setting hotkey
  if [ -z "$3" ]; then label+="_"
  else label="${label/$3/_$3}"; fi
  menu_id
  if [ -z $menus ]; then echo "<menu execute=\""$script" $(sanatize $1) -i "$id_header"-"$id_number" -r\" id=\""$script_name"_menu_id_"$id_header"-"$id_number"\" label=\"$label\"/>"
  else echo "<menu execute=\""$script" $(sanatize $1) -m -i "$id_header"-"$id_number" -r\" id=\""$script_name"_menu_id_"$id_header"-"$id_number"\" label=\"$label\"/>"; fi ;}
function spull () {
  # getting server information
  s="$(transmission-remote $connection -si)"
  s_tstatus="${s#*Upload speed limit:}"
  s_tstatus="${s_tstatus#*; }"
  s_tstatus="${s_tstatus%% turtle*}"
  s_dir="${s#*Download directory: }"
  s_dir="${s_dir%%[[:cntrl:]]*}"
  s_sr="${s#*Default seed ratio limit: }"
  s_sr="${s_sr%% *}"
  # upload information
  s_gulimit_current="${s#*Upload speed limit: }"
  s_gulimit_current="${s_gulimit_current%% (*}"
  s_gulimit_normal="${s#*Upload speed limit: }"
  s_gulimit_normal="${s_gulimit_normal#*limit: }"
  s_gulimit_normal="${s_gulimit_normal%%;*}"
  s_gulimit_turtle="${s#*Upload speed limit: }"
  s_gulimit_turtle="${s_gulimit_turtle#*turtle limit: }"
  s_gulimit_turtle="${s_gulimit_turtle%%)*}"
  s_gulimit_status="${s#*Upload speed limit: }"
  s_gulimit_status="${s_gulimit_status#*(}"
  s_gulimit_status="${s_gulimit_status%% *}"
  # download information
  s_gdlimit_current="${s#*Download speed limit: }"
  s_gdlimit_current="${s_gdlimit_current%% (*}"
  s_gdlimit_normal="${s#*Download speed limit: }"
  s_gdlimit_normal="${s_gdlimit_normal#*limit: }"
  s_gdlimit_normal="${s_gdlimit_normal%%;*}"
  s_gdlimit_turtle="${s#*Download speed limit: }"
  s_gdlimit_turtle="${s_gdlimit_turtle#*turtle limit: }"
  s_gdlimit_turtle="${s_gdlimit_turtle%%)*}"
  s_gdlimit_status="${s#*Download speed limit: }"
  s_gdlimit_status="${s_gdlimit_status#*(}"
  s_gdlimit_status="${s_gdlimit_status%% *}"
  }
function tpull () {
  t="$(transmission-remote $connection -t $1 -i)"
  t_status="${t#*State: }"
  t_status="${t_status%%[[:cntrl:]]*}"
  #connection
  t_perc="${t#*Percent Done: }"
  t_perc="${t_perc%%[[:cntrl:]]*}"
  t_avalible="${t#*Availability: }"
  t_avalible="${t_avalible%%[[:cntrl:]]*}"
  t_eta="${t#*ETA: }"
  t_eta="${t_eta%%(*}"
  t_down="${t#*Download Speed: }"
  t_down="${t_down%%[[:cntrl:]]*}"
  t_up="${t#*Upload Speed: }"
  t_up="${t_up%%[[:cntrl:]]*}"
  t_dlimit="${t#*Download Limit: }"
  t_dlimit="${t_dlimit%%[[:cntrl:]]*}"
  t_ulimit="${t#*Upload Limit: }"
  t_ulimit="${t_ulimit%%[[:cntrl:]]*}"
  #general
  t_added="${t#*Date added: }"
  t_added="${t_added%%[[:cntrl:]]*}"
  t_added="${t_added//  /}"
  t_size="${t#*Total size: }"
  t_size="${t_size%%(*}"
  t_path="${t#*Location: }"
  t_path="${t_path%%[[:cntrl:]]*}"
  t_sr="${t#*Ratio Limit: }"
  t_sr="${t_sr%%[[:cntrl:]]*}"
  t_hl="${t#*Honors Session Limits: }"
  t_hl="${t_hl%%[[:cntrl:]]*}"
  }
function tsec () {
  # status
  separator "Status: $t_status"
  # controls
  if [ $t_status = "Paused" ] || [ $t_status = "Finished" ] || [ $t_status = "Stopped" ]; then
    icall "Start"; echo "transmission-remote $connection -t $1 -s"; iend
  else
    icall "Stop"; echo "transmission-remote $connection -t $1 -S"; iend
  fi #if [[ $t_status = "Paused" ]]; then
  separator
  mcall "Remove"
    mcall "Remove Torrent"; icall "Yes"; echo "transmission-remote $connection -t $1 -r"; iend; mend
    mcall "Remove Torrent and Data"; icall "yes"; echo "transmission-remote $connection -t $1 -rad"; iend; mend
  mend
  separator
  mcall "Down Limit: $t_dlimit"
    icall "Disable Limit"; echo "transmission-remote $connection -t $1 -D"; iend
    separator
    for i in "${download_limits[@]}"; do icall "Set to $i KB/s"; echo "transmission-remote $connection -t $1 -d $i"; iend; done
    #~ unset i #sanatizing i
  mend
  mcall "Up Limit: $t_ulimit"
    icall "Disable Limit"; echo "transmission-remote $connection -t $1 -U"; iend
    separator
    for i in "${upload_limits[@]}"; do icall "Set to $i KB/s"; echo "transmission-remote $connection -t $1 -u $i"; iend; done
    #~ unset i #sanatizing i
  mend
  icall "Honor Limits: $t_hl"
    if [ $t_hl = "No" ]; then echo "transmission-remote $connection -t $1 -hl"
    else echo "transmission-remote $connection -t $1 -HL"; fi
  iend
  # connection info downloading
  separator "Have/Avalible: $t_perc / $t_avalible"
  separator "ETA: $t_eta"
  separator "Down/Up: $t_down / $t_up"
  # general info
  mcall "General Info"
    separator "Added: $t_added"
    separator "Total Size: $t_size"
    separator "Seed Ratio: $t_sr"
    separator "Path: $t_path"
  mend
  }
# parsing out arguments
while getopts ":hc:mt:i:r" opt; do
  case $opt in
    h)
      help_screen
      exit 0
      ;;
    c)
      connection="${OPTARG}"
      ;;
    m)
      multicall=1
      ;;
    t)
      t_id="${OPTARG}"
      ;;
    i)
      id_header="${OPTARG}"
      ;;
    r)
      recursion=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
      ;;
  esac
done #while getopts "??" opt; do
# menu logic
if [ -z $recursion ]; then
  # main menu call
  spull
  echo "<openbox_pipe_menu>"
    if [ -z $connection ]; then separator "Connected to localhost"
    else separator "Connected to $connection"; fi
    if [ $s_gdlimit_status = "Enabled" ]; then
      icall "Global Down Limit: $s_gdlimit_status"; echo "transmission-remote -D"; iend
    else separator "Global Down Limit: $s_gdlimit_status"; fi
    if [ $s_gulimit_status = "Enabled" ]; then
      icall "Global Up Limit: $s_gulimit_status"; echo "transmission-remote -U"; iend
    else separator "Global Up Limit: $s_gulimit_status"; fi
    if [ $s_tstatus = "Enabled" ]; then
      icall "Turtle Status: $s_tstatus"; echo "transmission-remote -AS"; iend
    else separator "Turtle Status: $s_tstatus"; fi
    separator "Default Dir: $s_dir"
    mcall "Transmission Controls"
      if [[ $s_tstatus = Dis* ]]; then icall "Enable Turtle"; echo "transmission-remote $connection -as"; iend
      else icall "Disable Turtle"; echo "transmission-remote $connection -AS"; iend; fi #if [[ $s_tstauts = "Disable" ]]; then
      separator "Current Down Limit: $s_gdlimit_current"
      mcall "Global Down Limit: $s_gdlimit_normal"
        icall "Disable"; echo "transmission-remote $connection -D"; iend
        separator
        for i in "${download_limits[@]}"; do icall "Set to $i KB/s"; echo "transmission-remote $connection -d $i"; iend; done
      mend
      mcall "Turtle Down Limit: $s_gdlimit_turtle"
        for i in "${download_limits[@]}"; do icall "Set to $i KB/s"; echo "transmission-remote $connection -asd $i"; iend; done
      mend
      separator "Current Up Limit: $s_gulimit_current"
      mcall "Global Up Limit: $s_gulimit_normal"
        icall "Disable"; echo "transmission-remote $connection -U"; iend
        separator
        for i in "${upload_limits[@]}"; do icall "Set to $i KB/s"; echo "transmission-remote $connection -u $i"; iend; done
      mend
      mcall "Turtle Up Limit: $s_gulimit_turtle"
        for i in "${upload_limits[@]}"; do icall "Set to $i KB/s"; echo "transmission-remote $connection -asu $i"; iend; done
      mend
      separator
      mcall "Transmission Shutdown"; icall "Yes"; echo "transmission-remote $connection --exit"; iend; mend
    mend
    separator "Torrents"
    # pulling torrent list
    while read l; do
      t_id=${l::4}
      t_id=${t_id// /}
      t_name=${l:70}
      if [ -z "$multicall" ]; then
        # path to pipemenu was not given, requests for all torrents will be run at time of menu creation
        if [[ ! $t_id = "ID" ]] && [[ ! $t_id = "Sum:" ]]; then
          tpull $t_id
          mcall "id $t_id: $t_name"
            tsec $t_id
          mend
        fi #if [[ ! $t_id = "ID" ]] && [[ ! $t_id = "Sum:" ]]; then
      else #if [[ -z "$path" ]]; then
        # path to pipemenu was given, requests for all torrents will be run at time of selection
        if [[ ! $t_id = "ID" ]] && [[ ! $t_id = "Sum:" ]]; then
          pcall "-t $t_id" $t_name
          for t in {1..5}; do menu_id; done; unset t #ticking menu_id for pcall
        fi #if [[ ! $t_id = "ID" ]] && [[ ! $t_id = "Sum:" ]]; then
      fi #if [[ -z "$path" ]]; then
    done <<< "$(transmission-remote $connection -l)"
  #end of pipemenu
  echo "</openbox_pipe_menu>"
else
  # recursive call
  echo "<!--recursive call-->"
  echo "<openbox_pipe_menu>"
    #~ menu_id #ticking menu_id for pcall
    tpull $t_id
    tsec $t_id
  echo "</openbox_pipe_menu>"
fi #if [ $# -gt 2 ]; then
exit 0
