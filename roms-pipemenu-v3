#!/bin/bash
#
# Known problems:
#
#     entries containing a '&' will throw errors. Unknown -
#     at this time if it's a openbox or script issue
#
# add to menus like openbox with a like this:
# <menu execute="script-name /path/to/files/" id="script-name" label="menu name"/>
#
# to-do list:
#
# need to expand supported file types
#
# software list for emulators and file manager
nes='mednafen'
snes='mednafen'
gb='mednafen'
gbc='mednafen'
gba='mednafen'
ps1='mednafen'
nds='desmume'
n64='mugen64plus'
cube='dolphin-emu /e'
wii='dolphin-emu /e'
# file manager
fm='thunar'
#
# Do not edit lines passed this point unless you know what you are doing
#
# locking script path
if [ -f "$1" ]; then declare -r path=$1; else declare -r path=""; fi
# locking rom path
case "$1" in
  */)
    declare -r roms=$1
    ;;
  *)
    declare -r roms=$1/
    ;;
esac
# making for loop ignore spaces
IFS=$(echo -en "\n\b")
# functions
if [ -z $3 ]; then path_plus=""; else
  case "$1" in
    */)
      path_plus=$1
      ;;
    *)
      path_plus=$1/
      ;;
  esac
fi #if [ -z $3 ]; then
if [ -z $4 ]; then id_number=0; else id_number=$4; fi
function menu_id () { ((id_number++)) ;}
function mcall () {
  menu_id
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
  echo '<menu id="Rom_menu_id_'$id_number'" label="'$label'">' ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
  echo '<item label="'$label'"><action name="Execute"><command>' ;}
function iend () { echo '</command></action></item>' ;}
function seperator () {
  if [ -z $1 ]; then
  echo '<separator/>'
  else
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
  echo '<separator label="'$label'"/>'
  fi ;}
function pcall () {
  menu_id
  echo '<menu execute="'$path' '$path' '$2'" id="transmission_menu_id_'$id_number'" label="'$1'"/>' ;}
function file_logic () {
if [[ "${1,,}" = *.nes ]]; then; icall $1; echo $nes \"$path$2$1\"; iend
elif [[ "${1,,}" = *.snes ]]; then; icall $1; echo $snes \"$path$2$1\"; iend
elif [[ "${1,,}" = *.smc ]]; then; icall $1; echo $snes \"$path$2$1\"; iend
elif [[ "${1,,}" = *.gb ]]; then; icall $1; echo $gb \"$path$2$1\"; iend
elif [[ "${1,,}" = *.gbc ]]; then; icall $1; echo $gbc \"$path$2$1\"; iend
elif [[ "${1,,}" = *.gba ]]; then; icall $1; echo $gba \"$path$2$1\"; iend
elif [[ "${1,,}" = *.nds ]]; then; icall $1; echo $nds \"$path$2$1\"; iend
elif [[ "${1,,}" = *.v64 ]]; then; icall $1; echo $n64 \"$path$2$1\"; iend
elif [[ "${1,,}" = *.iso ]] || [[ "${1,,}" = *.cue ]]; then
    mcall $1
      icall "Playstation 1"
        echo $ps1 \"$path$2$1\"
      iend
      icall "Gamecube"
        echo $cube \"$path$2$1\"
      iend
      icall "Wii"
          echo $wii \"$path$2$1\"
      iend
    mend
else
  icall $1; echo $fm \"$path$2\"; iend
fi
}
function list_logic () {
local path_plus=""
#path management
case "$1" in
  */)
    addition=$1
    ;;
  *)
    addition=$1/
    ;;
esac
if [ ! $2 == "" ]; then
  case "$2" in
    */)
      path_plus=$2
      ;;
    *)
      path_plus=$2/
      ;;
  esac
fi
path_plus=$path_plus$addition
#folders
local list_folders=$(ls -Q1F $path$path_plus | grep -F '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
for list_folder in $list_folders; do
  mcall $list_folder
    list_logic $list_folder $path_plus
  mend
done
#items
local list_items=$(ls -Q1F $path$path_plus | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
for list_item in $list_items; do
  file_logic $list_item $path_plus
done
}
if [ $# -gt 2 ]; then
  # Pipemenu Entry
  menu_id #ticking menu_id for pcall
  # pulling sub folder list
  declare -r local list_group=$(ls -Q1F $path | grep -F '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
  for folder in $list_group; do
    pcall $roms $folder
  done #for folder in $list_group; do
  #pulling roms list from main folders
  declare -r local list_single=$(ls -Q1F $rom | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
  for file in $list_single; do
    file_logic $file
  #done for pulling roms list
  done
else
  # start of menu
  echo "<openbox_pipe_menu>"
    #link to path
    #~ icall "Roms Folder"
      #~ echo $fm $rom
    #~ iend
    # emulator list
    #~ mcall "Emulator List"
      #~ separator "Emulator followed by Command"
      #~ icall "Nintendo handled by '$nes'" ; iend
      #~ icall "Super Nintendo handle by '$snes'" ; iend
      #~ icall "Gameboy handled by '$gb'" ; iend
      #~ icall "Gameboy Color handled by '$gbc'" ; iend
      #~ icall "Gameboy Advance handled by '$gba'" ; iend
      #~ icall "Playstation 1 handled by '$ps1'" ; iend
      #~ icall "Nitendo DS handled by '$nds'" ; iend
      #~ icall "Nitendo 64 handled by '$n64'" ; iend
      #~ icall "Gamecube handled by '$cube'" ; iend
      #~ icall "Wii handled by '$wii'" ; iend
    #~ mend
    if [ -z "$path" ]; then
      # path to pipemenu was not given
      separator "Grouped Roms"
      # pulling sub folder list
      declare -r local list_group=$(ls -Q1F $path | grep -F '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
      for folder in $list_group; do
        mcall $folder
          list_logic $folder
        mend
      done #for folder in $list_group; do
      separator "Single Roms"
      # pulling roms list from main folders
      declare -r local list_single=$(ls -Q1F $path | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
      for file in $list_single; do
        file_logic $file
      done #for file in $list_single; do
    else #if [ -z "$path" ]; then
      for folder in $list_group; do
        pcall $roms $folder
      done #for folder in $list_group; do
    fi #if [[ -z "$path" ]]; then
    separator "Single Roms"
    #pulling roms list from main folders
    declare -r local list_single=$(ls -Q1F $rom | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
    for file in $list_single; do
      file_logic $file
    #done for pulling roms list
    done
  #end of pipemenu
  echo "</openbox_pipe_menu>"
  exit 0
fi #if [ $# -gt 2 ]; then
exit 0
