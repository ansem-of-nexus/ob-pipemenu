#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="script-name /path/to/files/" id="script-name" label="menu name"/>
#
# to-do list:
#
# change ls commands to reduce overhead
# move ls command to function
#
# software list for emulators and file manager
nes='mednafen'
snes='mednafen'
gb='mednafen'
gbc='mednafen'
gba='mednafen'
ps1='mednafen'
nds='desmume'
n64='mugen64plus'
cube='dolphin-emu -e'
wii='dolphin-emu -e'
# file manager
fm='thunar'
#
# Do not edit lines passed this point unless you know what you are doing
#
function help_screen () {
  echo "Usage: script [option] 'something'"
  echo ""
  echo "-option"
  echo ""
  exit 0
  }
# voiding variables
path=""
id_number="0"
recursion=""
folder=""
# parsing out arguments
while getopts ":hp:f:i:r" opt; do
  case $opt in
    h)
      help_screen
      exit 0
    ;;
    p)
      declare -r path="${OPTARG}"
    ;;
    f)
      declare -r folder="${OPTARG}"
    ;;
    i)
      id_header="${OPTARG}"
    ;;
    r)
      recursion=1
    ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
    ;;
  esac
done #while getopts "??" opt; do
# path must be set
if [ -z $path ]; then echo "path must be set with '-p /path/to/stuff'" && exit 1; fi
if [ -z $id_header ]; then id_header=0; fi
# setting script information
script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
script_name="$(basename "${BASH_SOURCE[0]}")"
# making for loop ignore spaces
IFS=$(echo -en "\n\b")
# functions
function menu_id () { ((id_number++)) ;}
function mcall () {
  menu_id
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
    #setting hotkey
    if [ -z "$2" ]; then
      label=$label"_"
    else
      label=("${label/$2/_$2}")
    fi
  echo '<menu id="'$script_name'_menu_id_'$id_header'-'$id_number'" label="'$label'">' ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
    #setting hotkey
    if [ -z "$2" ]; then
      label=$label"_"
    else
      label=("${label/$2/_$2}")
    fi
  echo '<item label="'$label'"><action name="Execute"><command>' ;}
function iend () { echo '</command></action></item>' ;}
function separator () {
  if [ -z $1 ]; then
  echo '<separator/>'
  else
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
  echo '<separator label="'$label'"/>'
  fi ;}
function pcall () {
  local label="$1"
  # sanatizing label
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
    #setting hotkey
    if [ -z "$2" ]; then
      label=$label"_"
    else
      label=("${label/$2/_$2}")
    fi
  local command=""
  menu_id
  if [ ! -z $path ]; then command+="-p $path "; fi
  if [ -z $folder ]; then
    command+="-f '$1'"
  else
    command+="-f '$folder/$1'"
  fi
  echo '<menu execute="'$script $command '-i '$id_header'-'$id_number' -r" id="'$script_name'_menu_id_'$id_header'-'$id_number'" label="'$label'"/>' ;}
function file_logic () {
  case "$2" in
  *.nes)
    icall $2; echo $nes \"$1/$2\"; iend
    ;;
  *.snes)
    icall $2; echo $snes \"$1/$2\"; iend
    ;;
  *.smc)
    icall $2; echo $snes \"$1/$2\"; iend
    ;;
  *.gb)
    icall $2; echo $gb \"$1/$2\"; iend
    ;;
  *.gbc)
    icall $2; echo $gbc \"$1/$2\"; iend
    ;;
  *.gba)
    icall $2; echo $gba \"$1/$2\"; iend
    ;;
  *.nds)
    icall $2; echo $nds \"$1/$2\"; iend
    ;;
  *.v64)
    icall $2; echo $n64 \"$1/$2\"; iend
    ;;
  *.iso|*.cue)
    disk_logic "$1" "$2"
    ;;
  *)
    echo "<!-- $2 does not get an entry -->"
  esac ;}
function disk_logic () {
  mcall "$2"
    icall "Playstation 1"
      echo $ps1 \"$1/$2\"
    iend
    icall "Gamecube"
      echo $cube \"$1/$2\"
    iend
    icall "Wii"
        echo $wii \"$1/$2\"
    iend
  mend ;}
function folder_logic () {
  # clearing variable
  item_name=""
  list=""
  declare -r local list=$(ls -Q1FL --group-directories-first $1)
  for item in $list; do
  case $item in
    *\/)
      local item_name=$item
      item_name=${item_name:1: -2}
      pcall "$item_name"
      ;;
    *\")
      local item_name=$item
      item_name=${item_name:1: -1}
      if [ -z $folder ]; then
        file_logic $path "$item_name"
      else
        file_logic $path/$folder "$item_name"
      fi
      ;;
  esac; done ;}
if [ -z $recursion ]; then
  # start of menu
  echo "<openbox_pipe_menu>"
    # link to path
    icall "Roms Folder"
      echo $fm $path
    iend
    separator
    # emulator list
    mcall "Emulator List"
      separator "Emulator followed by Command"
      icall "Nintendo handled by '$nes'" ; echo ""; iend
      icall "Super Nintendo handle by '$snes'" ; echo ""; iend
      icall "Gameboy handled by '$gb'" ; echo ""; iend
      icall "Gameboy Color handled by '$gbc'" ; echo ""; iend
      icall "Gameboy Advance handled by '$gba'" ; echo ""; iend
      icall "Playstation 1 handled by '$ps1'" ; echo ""; iend
      icall "Nitendo DS handled by '$nds'" ; echo ""; iend
      icall "Nitendo 64 handled by '$n64'" ; echo ""; iend
      icall "Gamecube handled by '$cube'" ; echo ""; iend
      icall "Wii handled by '$wii'" ; echo ""; iend
    mend
    separator
    folder_logic $path
  #end of pipemenu
  echo "</openbox_pipe_menu>"
  exit 0
else
  # Pipemenu Entry
  echo "<openbox_pipe_menu>"
    menu_id #ticking menu_id for pcall
    folder_logic $path/$folder
  echo "</openbox_pipe_menu>"
fi #if [ -z $recursion ]; then
exit 0
