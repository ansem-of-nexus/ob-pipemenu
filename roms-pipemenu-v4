#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="script-name /path/to/files/" id="script-name" label="menu name"/>
#
# to-do list:
#
# change ls commands to reduce overhead
# move ls command to function
#
# software list for emulators and file manager
nes='mednafen'
snes='mednafen'
gb='mednafen'
gbc='mednafen'
gba='mednafen'
ps1='mednafen'
nds='desmume'
n64='mugen64plus'
cube='dolphin-emu /e'
wii='dolphin-emu /e'
# file manager
fm='thunar'
#
# Do not edit lines passed this point unless you know what you are doing
#
function help_screen () {
  echo "Usage: script [option] 'something'"
  echo ""
  echo "-option"
  echo ""
  exit 0
  }
# voiding variables
path=""
id_number=""
recursion=""
# parsing out arguments
while getopts ":hp:f:i:" opt; do
  case $opt in
    h)
      help_screen
      exit 0
    ;;
    p)
      declare -r path="${OPTARG}"
      exit 0
    ;;
    f)
      declare -r folder="${OPTARG}"
      exit 0
    ;;
    i)
      id_number="${OPTARG}"
      exit 0
    ;;
    r)
      recursion=1
      exit 0
    ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
    ;;
  esac
done #while getopts "??" opt; do
# path must be set
if [ -z $path ]; then echo "path must be set with '-p /path'" && exit 1; fi
# setting script information
script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
script_name="$(basename "${BASH_SOURCE[0]}")"
# checking for id_number
if [ -z $id_number ]; then id_number=0; fi
# making for loop ignore spaces
IFS=$(echo -en "\n\b")
# functions
function menu_id () { ((id_number++)) ;}
function mcall () {
  menu_id
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
    #setting hotkey
    if [ -z "$2" ]; then
      label=$label"_"
    else
      label=("${label/$2/_$2}")
    fi
  echo '<menu id="Rom_menu_id_'$id_number'" label="'$label'">' ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
    #setting hotkey
    if [ -z "$2" ]; then
      label=$label"_"
    else
      label=("${label/$2/_$2}")
    fi
  echo '<item label="'$label'"><action name="Execute"><command>' ;}
function iend () { echo '</command></action></item>' ;}
function seperator () {
  if [ -z $1 ]; then
  echo '<separator/>'
  else
  local label="$1"
  # sanatizing name
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
  echo '<separator label="'$label'"/>'
  fi ;}
function pcall () {
  menu_id
  local label="$1"
  # sanatizing label
  label=("${label//</&lt;}")
  label=("${label//&/&amp;}")
  label=("${label//>/&gt;}")
  label=("${label//\"/&quot;}")
  label=("${label//\'/&apos;}")
  label=("${label//_/__}")
    #setting hotkey
    if [ -z "$2" ]; then
      label=$label"_"
    else
      label=("${label/$2/_$2}")
    fi
  if [ -z $path ]; then
    echo '<menu execute="'$script '-p' $path '-i' $id_number'" id="'$script_name'_menu_id_'$id_number'" label="'$label'"/>'
  else
    echo '<menu execute="'$script '-i' $id_number'" id="'$script_name'_menu_id_'$id_number'" label="'$label'"/>'
  fi  ;}
function file_logic () {
  case "$1" in
  *.nes)
    icall $1; echo $nes \"$path$2$1\"; iend
    ;;
  *.snes)
    icall $1; echo $snes \"$path$2$1\"; iend
    ;;
  *.smc)
    icall $1; echo $snes \"$path$2$1\"; iend
    ;;
  *.gb)
    icall $1; echo $gb \"$path$2$1\"; iend
    ;;
  *.gbc)
    icall $1; echo $gbc \"$path$2$1\"; iend
    ;;
  *.gba)
    icall $1; echo $gba \"$path$2$1\"; iend
    ;;
  *.nds)
    icall $1; echo $nds \"$path$2$1\"; iend
    ;;
  *.v64)
    icall $1; echo $n64 \"$path$2$1\"; iend
    ;;
  *.iso)
    disk_logic "$1"
    ;;
  *.cue)
    disk_logic "$1"
  done
}
function disk_logic () {
  mcall "$1"
    icall "Playstation 1"
      echo $ps1 \"$path$2$1\"
    iend
    icall "Gamecube"
      echo $cube \"$path$2$1\"
    iend
    icall "Wii"
        echo $wii \"$path$2$1\"
    iend
  mend
  }
if [ -z $recursion ]; then
  # Pipemenu Entry
  menu_id #ticking menu_id for pcall
  # pulling sub folder list
  declare -r list_group=$(ls -Q1F $path/$folder | grep -F '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
  for item_folder in $list_group; do
    pcall $item_folder $id_number
  done #for folder in $list_group; do
  #pulling roms list from main folders
  declare -r list_single=$(ls -Q1F $path/$folder | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
  for item_file in $list_single; do
    file_logic $item_file
  #done for pulling roms list
  done
else
  # start of menu
  echo "<openbox_pipe_menu>"
    # link to path
    #~ icall "Roms Folder"
      #~ echo $fm $rom
    #~ iend
    # emulator list
    #~ mcall "Emulator List"
      #~ separator "Emulator followed by Command"
      #~ icall "Nintendo handled by '$nes'" ; iend
      #~ icall "Super Nintendo handle by '$snes'" ; iend
      #~ icall "Gameboy handled by '$gb'" ; iend
      #~ icall "Gameboy Color handled by '$gbc'" ; iend
      #~ icall "Gameboy Advance handled by '$gba'" ; iend
      #~ icall "Playstation 1 handled by '$ps1'" ; iend
      #~ icall "Nitendo DS handled by '$nds'" ; iend
      #~ icall "Nitendo 64 handled by '$n64'" ; iend
      #~ icall "Gamecube handled by '$cube'" ; iend
      #~ icall "Wii handled by '$wii'" ; iend
    #~ mend
    if [ -z "$path" ]; then
      # path to pipemenu was not given
      separator "Grouped Roms"
      # pulling sub folder list
      declare -r local list_group=$(ls -Q1F $path | grep -F '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
      for folder in $list_group; do
        mcall $folder
          list_logic $folder
        mend
      done #for folder in $list_group; do
      separator "Single Roms"
      # pulling roms list from main folders
      declare -r local list_single=$(ls -Q1F $path | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
      for file in $list_single; do
        file_logic $file
      done #for file in $list_single; do
    else #if [ -z "$path" ]; then
      for folder in $list_group; do
        pcall $roms $folder
      done #for folder in $list_group; do
    fi #if [[ -z "$path" ]]; then
    separator "Single Roms"
    #pulling roms list from main folders
    declare -r local list_single=$(ls -Q1F $rom | grep -Fv '/' | awk -F'"' '{print $2}' | awk -F'"' '{print $1}')
    for file in $list_single; do
      file_logic $file
    #done for pulling roms list
    done
  #end of pipemenu
  echo "</openbox_pipe_menu>"
  exit 0
fi #if [ $# -gt 2 ]; then
exit 0
##########
