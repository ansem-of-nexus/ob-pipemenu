#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="/path to script -p /path/to/stuff" id="menu id" label="menu name"/>
#
# setting software
declare -r fm='thunar'
declare -r ed='geany'
declare -r te='terminator -x'
#
# Don't edit past this line unless you know what you are doing
#
# help screen
function help_screen () {
  echo "Usage: script [option]"
  echo "  <menu execute=\"/path/to/script\" id=\"menu id\" label=\"menu name\"/>"
  echo ""
  echo "-h (this screen)"
  echo "-p /path/to/stuff"
  echo "-i id_number (id number of the menu this is called inside of)"
  echo "-r (telling scrit that is is being run inside of itself)"
  echo ""
  exit 0
  }
# voiding variables
path=""
id_number=""
# parsing out arguments
while getopts ":hp:i:r" opt; do
  case $opt in
    h)
      help_screen
      exit 0
    ;;
    p)
      declare -r path="${OPTARG}"
    ;;
    i)
      id_header="${OPTARG}"
    ;;
    r)
      recursion=1
    ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
    ;;
  esac #case $opt in
done #while getopts "??" opt; do
# setting script information
#~ script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
script_name="$(basename "${BASH_SOURCE[0]}")"
# checking path, to force path use
#~ if [ -z $path ]; then echo "path must be set with '-p /path/to/stuff'" && exit 1; fi
# checking for id_number
if [ -z $id_header ]; then id_header=0; fi
# making for loop ignore spaces
IFS=$(echo -en "\n\b")
# functions
function sanatize () {
  local input="$1"
  # sanatizing input
  input=("${input//</&lt;}")
  input=("${input//&/&amp;}")
  input=("${input//>/&gt;}")
  input=("${input//\"/&quot;}")
  input=("${input//\'/&apos;}")
  input=("${input//_/__}")
  echo $input ;}
function menu_id () { ((id_number++)) ;}
function mcall () {
  menu_id
  local label="$(sanatize $1)"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo '<menu id="'$script_name'_menu_id_'$id_header'-'$id_number'" label="'$label'">' ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label="$1"
  local label="$(sanatize $1)"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo '<item label="'$label'"><action name="Execute"><command>' ;}
function iend () { echo '</command></action></item>' ;}
function scall () {
  if [ -z $1 ]; then
    echo '<separator/>'
  else
    local label="$(sanatize $1)"
    echo '<separator label="'$label'"/>'
  fi ;}
function pcall () {
  menu_id
  local label="$(sanatize $1)"
  local command=""
  menu_id
  if [ ! -z $path ]; then command+="-p $path "; fi
  if [ -z $folder ]; then command+="-f '$1'"; else command+="-f '$folder/$1'"; fi
  echo '<menu execute="'$script $command '-i '$id_header'-'$id_number' -r" id="'$script_name'_menu_id_'$id_header'-'$id_number'" label="'$label'"/>' ;}
if [ -z $recursion ]; then
  # if -r is used
  echo "<openbox_pipe_menu>"
  echo "<!--pipemenu has been called again-->"
  echo "</openbox_pipe_menu>"
else
  # primary pipemenu
  echo "<openbox_pipe_menu>"
  echo "</openbox_pipe_menu>"
exit 0
