#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="script-name -p /path/to/files/" id="script-name" label="menu name"/>
#
# software list for emulators
nes='mednafen'
snes='mednafen'
gb='mednafen'
gbc='mednafen'
gba='mednafen'
ps1='mednafen'
nds='desmume'
n64='mugen64plus'
cube='dolphin-emu -e'
wii='dolphin-emu -e'
# file manager
declare -r fm='thunar'
# editor
declare -r ed='geany'
# terminal
declare -r te='terminator -x'
#
# Do not edit lines passed this point unless you know what you are doing
#
function help_screen () {
  echo "Usage: script [option] 'something'"
  echo ""
  echo "-option"
  echo ""
  exit 0
  }
# voiding variables
declare path
declare recursion
declare id_header
declare menus; menus=""
# parsing out arguments
while getopts ":hp:i:rml:" opt; do
  case $opt in
    h)
      help_screen
      exit 0
      ;;
    p)
      case "${OPTARG}" in
        */)
          declare -r path="${OPTARG}"
          ;;
        *)
          declare -r path="${OPTARG}/"
          ;;
      esac
      ;;
    i)
      id_header="${OPTARG}"
      ;;
    r)
      recursion=1
      ;;
    m)
      menus=1
      ;;
    l)
      declare playlist
      playlist="${OPTARG%*\/}"
      playlist="${playlist##\/*}"
      playlist="${OPTARG}$playlist.m3u"
      if [ ! -f "$playlist" ]; then touch "$playlist"; fi
      echo "#EXTM3U" > "$playlist"
      while read l; do
        file="${l%*\"}"
        file="${file##\/*}"
        echo "$file" >> "$playlist"
      done <<< "$(ls -lQ \""${OPTARG}"\"|grep -v ^total|grep -v m3u|grep ^-)"
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
      ;;
  esac
done #while getopts "??" opt; do
# making loops ignore spaces
IFS=$(echo -en "\n\b")
# setting variables and checking for them
declare script; script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
declare script_name; script_name="$(basename "${BASH_SOURCE[0]}")"
if [ -z "$path" ]; then echo "path must be set with '-p /path/to/stuff'" && exit 1; fi
if [ -z "$id_header" ]; then id_header="m"; fi
# functions
function sanatize () {
  local input; input="$1"
  # sanatizing input
  input=("${input//</&lt;}")
  input=("${input//&/&amp;}")
  input=("${input//>/&gt;}")
  input=("${input//\"/&quot;}")
  input=("${input//\'/&apos;}")
  input=("${input//_/__}")
  echo "$input" ;}
function menu_id () { if [ -z "$id_number" ]; then id_number=0; else ((id_number++)); fi ;}
function mcall () {
  menu_id
  local label; label="$(sanatize "$1")"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo "<menu id=\""$script_name"_menu_id_"$id_header"-"$id_number"\" label=\""$label"\">" ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label; label="$(sanatize "$1")"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo "<item label=\""$label"\"><action name=\"Execute\"><command>" ;}
function iend () { echo "</command></action></item>" ;}
function separator () {
  if [ -z "$*" ]; then
  echo '<separator/>'
  else
  local label; label="$(sanatize "$1")"
  echo "<separator label=\""$label"\"/>"; fi ;}
function pcall () {
  # order of inputs is command arguments, then label, and then hotkey
  local label; label="$(sanatize "$2")"
  #setting hotkey
  if [ -z "$3" ]; then label+="_"
  else label="${label/$3/_$3}"; fi
  menu_id
  if [ -z $menus ]; then echo "<menu execute=\""$script" $(sanatize $1) -i "$id_header" -r\" id=\""$script_name"_menu_id_"$id_header"-"$id_number"\" label=\"$label\"/>"
  else echo "<menu execute=\""$script" $(sanatize $1) -m -i "$id_header" -r\" id=\""$script_name"_menu_id_"$id_header"-"$id_number"\" label=\"$label\"/>"; fi ;}
function emulator_list () {
  mcall "Emulator list"
    icall "Nintendo"; echo "$nes $1"; iend
    icall "Super Nintendo"; echo "$snes $1"; iend
    icall "Gameboy"; echo "$gb $1"; iend
    icall "GB Color"; echo "$gbc $1"; iend
    icall "GB Advanced"; echo "$gba $1"; iend
    icall "Nintendo DS"; echo "$nds $1"; iend
    icall "Nintendo 64"; echo "$n64 $1"; iend
    icall "Playstation 1"; echo "$ps1 $1"; iend
    icall "Gamecube"; echo "$cube $1"; iend
    icall "Wii"; echo "$wii $1"; iend
  mend;}
function file_menu () {
   if [ ! -z $menus ]; then
    mcall "$3"
      separator "$1"
      icall "run"; echo "$1 \"$2\""; iend
      icall "show terminal"; echo "$te $1 \"$2\""; iend
      separator
      emulator_list "$2"
    mend
  else icall "$3"; echo "$1 \"$2\""; iend ;fi;}
function disk_menu () {
  mcall "$2"
    icall "Playstation 1"; echo "$ps1 $1"; iend
    if [ ! -z $menus ]; then icall "show terminal"; echo "$te $ps1 \"$1\""; iend; separator ;fi
    icall "Gamecube"; echo "$cube $1"; iend
    if [ ! -z $menus ]; then icall "show terminal"; echo "$te $ps1 \"$1\""; iend; separator ;fi
    icall "Wii"; echo "$wii $1"; iend
    if [ ! -z $menus ]; then icall "show terminal"; echo "$te $ps1 \"$1\""; iend; separator ;fi
    if [ "$#" -gt 2 ]; then icall "make playlist"; echo "$script -l "; iend ;fi
  mend ;}
function file_logic () {
  case "$1" in
    *.nes)
      file_menu "$nes" "$1" "$2"
      ;;
    *.smc|*.snes)
      file_menu "$snes" "$1" "$2"
      ;;
    *.gb)
      file_menu "$gb" "$1" "$2"
      ;;
    *.gbc)
      file_menu "$gbc" "$1" "$2"
      ;;
    *.gba)
      file_menu "$gba" "$1" "$2"
      ;;
    *.nds)
      file_menu "$nds" "$1" "$2"
      ;;
    *.v64)
      file_menu "$n64" "$1" "$2"
      ;;
    *.iso|*.cue)
      disk_menu "$1" "$2" 1
      ;;
    *.m3u)
      disk_menu "$1" "$2"
      ;;
    *)
      echo "<!-- $2 does not get an entry -->"
  esac ;}
function pathway () {
  while read l; do
    case $l in
      \-*)
        file="${l#*\"}"
        file="${file%%\"*}"
        entry="${file%\.*}"
        file_logic "$file" "$entry"
        ;;
      d*)
        dir="${l%\"*}"
        dir="${dir##*\"}"
        entry="${dir##*\/}"
        echo "$dir | $entry"
        pcall "-p $path$dir" "$entry"
        ;;
      l*)
        entry="${l#*\"}"
        entry="${entry%%\"*}"
        link="${l%\"*}"
        link="${link##*\"}"
        if [ -d "$link" ]; then
          entry="${entry##\/*}"
          pcall "-p $link" "$entry"
        else
          entry="${entry%*\.}"
          file_logic "$link" "$entry"
        fi
        ;;
    esac
  done <<< "$(ls -ohQ "$1"|grep -v ^total)" ;}
# pipemenu
if [ -z $recursion ]; then
  # start of pipemenu
  echo "<openbox_pipe_menu>"
    icall "Roms Folder"
      echo "$fm $path"
    iend
    separator
    mcall "Emulator List"
      separator "Emulator followed by Command"
      icall "Nintendo handled by '$nes'" ; echo ""; iend
      icall "Super Nintendo handle by '$snes'" ; echo ""; iend
      icall "Gameboy handled by '$gb'" ; echo ""; iend
      icall "Gameboy Color handled by '$gbc'" ; echo ""; iend
      icall "Gameboy Advance handled by '$gba'" ; echo ""; iend
      icall "Playstation 1 handled by '$ps1'" ; echo ""; iend
      icall "Nitendo DS handled by '$nds'" ; echo ""; iend
      icall "Nitendo 64 handled by '$n64'" ; echo ""; iend
      icall "Gamecube handled by '$cube'" ; echo ""; iend
      icall "Wii handled by '$wii'" ; echo ""; iend
    mend
    separator
    pathway "$path"
  #end of pipemenu
  echo "</openbox_pipe_menu>"
  exit 0
else
  # Pipemenu Entry
  echo "<openbox_pipe_menu>"
    menu_id #ticking menu_id for pcall
    pathway "$path"
  echo "</openbox_pipe_menu>"
fi #if [ -z $recursion ]; then
exit 0
# show file size and permmissions?
# have to add -h for human readable
# show archives?
# if toggle, generate help menu?
