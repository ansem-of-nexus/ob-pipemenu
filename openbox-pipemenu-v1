#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="/path/to/script [options]" id="menu id" label="menu name"/>"
#
# Setting Software
declare -r fm='thunar'
declare -r ed='geany'
#
# Do not edit lines passed this point unless you know what you are doing
#
# help screen
function help_screen () {
  echo "Usage: pipemenu for openbox menu.xml"
  echo "  <menu execute=\"/path/to/script [options]\" id=\"menu id\" label=\"menu name\"/>"
  echo ""
  echo "-h (this screen)"
  echo "-m /path/to/menu.xml"
  #echo "-p /path/to/stuff"
  echo "-i id_header (id header and id_number of the menu this is called inside of)"
  echo "-r (telling script that is is being run inside of itself)"
  echo ""
  exit 0
  }
#voiding variables
declare path
declare recursion
declare id_header
declare menu
# making loops ignore spaces
IFS=$(echo -en "\n\b")
# functions
function sanatize () { local input="$1"
  # sanatizing input
  input=("${input//&/&amp;}")
  input=("${input//</&lt;}")
  input=("${input//>/&gt;}")
  input=("${input//\"/&quot;}")
  input=("${input//\'/&apos;}")
  input=("${input//_/__}")
  echo "$input";}
function menu_id () { if [ -z id_number ]; then id_number=0; fi; ((id_number++)) ;}
function mcall () { menu_id
  local label="$(sanatize $1)"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo "<menu id=\"${script_name}_menu_id_${id_header}-${id_number}\" label=\"$label\">" ;}
function mend () { echo '</menu>' ;}
function icall () { local label="$(sanatize $1)"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo '<item label="'$label'"><action name="Execute"><command>' ;}
function iend () { echo '</command></action></item>' ;}
function separator () {
  if [ -z "$*" ]; then echo '<separator/>'
  else local label="$(sanatize $1)"
  echo '<separator label="'$label'"/>';fi;}
# parsing out arguments
while getopts ":hp:i:rm:" opt; do case $opt in
    h) help_screen
      exit 0;;
    p) case "${OPTARG}" in
        */) declare -r path="${OPTARG}";;
        *) declare -r path="${OPTARG}/";;
      esac;;
    i) id_header="${OPTARG}";;
    r) recursion=1;;
    m) declare -r menu="${OPTARG}";;
    \?) echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1;;
    :) echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1;;
esac; done #while getopts "??" opt; do
# vars
declare -r script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
declare -r script_name="$(basename "${BASH_SOURCE[0]}")"
if [ -z $menu ]; then echo "menu must be set with '-m /path/to/menu.xml'" && exit 1; fi
if [ -z $id_header ]; then id_header="m"; fi
if [ -z $recursion ]; then
  # main pipemenu
  echo "<openbox_pipe_menu>"
    mcall "Openbox"
      echo "<item label=\"Reconfigure\"><action name=\"Reconfigure\"/></item>"
      echo "<item label=\"Restart\"><action name=\"Restart\"/></item>"
      separator
      icall "Edit Menu.xml"; echo "$ed $menu"; iend
      #icall "Open Pipemenu folder"; echo "$fm $menu"; iend
      separator
      icall "Obconf"; echo "obconf"; iend
    mend
    separator "Pipemenu List"
    while read l; do
      if [[ "$l" = *"<menu execute"* ]]; then
        # parsing pipemenu entry
        pipemenu="${l#*execute=\"}"
        pipemenu="${pipemenu%%\ *}"
        if [[ $pipemenu = \~* ]]; then pipemenu="${pipemenu/\~/\/home\/$USER}"; fi
        #pipemenu="${pipemenu/\~/\/home\/$USER}"
        folder="${pipemenu%\/*}"
        label="${l#*label=\"}"
        label="${label%%\"*}"
        id="${l#*id=\"}"
        id="${id%%\"*}"
        # looking up pipemenu file
        file="$(ls -ohQ $pipemenu)"
        # parsing file entry
        perms="${file::10}"
        size="${file#*$USER }"
        if [[ $size = ^\ * ]]; then size="${size##( )}"; fi
        size="${size%%\ *}"
        mcall "$id"
          if [[ $perms == l* ]]; then
            link="${file%\"*}"
            link="${link##*\"}"
            link_dir="${link%\/*}"
            link_ls="$(ls -ohQ $link)"
            link_perms="${link_ls%%\ *}"
            link_size="${link_ls#*$USER\ }"
            link_size="${link_size%%\ *}"
            link_name="${link_ls%\"*}"
            link_name="${link_name##*/}"
            mcall $perms
              separator $link_name
              separator $link_perms
              separator $link_size
              icall "edit"; echo "$ed $link_dir/$link_name"; iend
              if [[ $link_perms == *x* ]]; then icall "chmod -x"; echo "chmod -x $link_dir/$link_name"; iend
              else icall "chmod +x";echo "chmod +x $link";iend;fi
              separator
              icall "Open Folder"; echo "$fm $link_dir"; iend
            mend
          else
            separator "Perms: $perms"
          fi
          separator "Size: $size"
          if [[ "$l" = \<!--* ]]; then
            icall "enable menu"; echo "$(sanatize "sed -e '/$id/ s/<!--// ; /$id/ s/-->//' -i $menu")"; iend
          else
            icall "disable menu"; echo "$(sanatize "sed -e '/$id/ s/^/<!--/ ; /$id/ s/$/-->/' -i $menu")"; iend
          fi # if menu is commented out
          mcall "delete entry"; icall "Yes"; echo "$(sanatize "sed -e '/id=\"$id\"/d' -i $menu")"; iend; mend
          separator
          icall "Edit"; echo "$ed $pipemenu"; iend
          if [[ $perms == *x* ]]; then
            icall "chmod -x";echo "chmod -x $pipemenu";iend
          else
            icall "chmod +x";echo "chmod +x $pipemenu";iend
          fi #if [[ $perms == *x* ]]; then
          separator
          icall "Open Folder";echo "$fm $folder";iend
          # replace file with selected file from list
        mend
      fi #if [[ "$l" = *"<menu execute"* ]]; then
    done <<< "$(cat $menu)"
  echo "</openbox_pipe_menu>"
else
  # recursive pipemenu
  echo "<openbox_pipe_menu>"
    echo "<!--pipemenu has been called again-->"
  echo "</openbox_pipe_menu>"
fi #if [ -z $recursion ]; then
exit 0
# To-Do List
# change menu with a list?
