#!/bin/bash
#
# add to menus like openbox with a like this:
# <menu execute="/path/to/script -p /path/to/music" id="menu id" label="menu name"/>
#
# setting software
declare -r fm='thunar'
declare -r te='terminator -T "MOCP" -x'
#
# Don't edit past this line unless you know what you are doing
#
# help screen
function help_screen () {
  echo "Usage: script [option]"
  echo "  <menu execute=\"/path/to/script -p /path/to/music\" id=\"menu id\" label=\"menu name\"/>"
  echo "-h (this screen)"
  echo "-p /path/to/stuff"
  echo ""
  exit 0 ;}
# making for loop ignore spaces
IFS=$(echo -en "\n\b")
# voiding variables
path=""
# parsing out arguments
while getopts ":hp:" opt; do
  case $opt in
    h)
      help_screen
      exit 0
    ;;
    p) declare -r path="${OPTARG}" ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help_screen
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      help_screen
      exit 1
    ;;
  esac #case $opt in
done #while getopts "??" opt; do
# checking for id_header
if [ -z $id_header ]; then id_header=0; fi
# checking if moc is running
status=$(pidof mocp)
if [ ! $status = null ]; then moc_info="$(mocp -i)"
  # set file_name
  file_name="${moc_info#File: }" #%file
  file_name="${file_name##*/}" #%file
  file_name="${file_name%%[[:cntrl:]]*}" #%file
  # set song_name
  song_name="${moc_info#*SongTitle: }"
  song_name="${song_name%%[[:cntrl:]]*}"
  # set artist
  artist="${moc_info#*Artist: }"
  artist="${artist%%[[:cntrl:]]*}"
  # set album
  album="${moc_info#*Album: }"
  album="${album%%[[:cntrl:]]*}"
  # set song_length
  song_length="${moc_info#*TotalTime: }"
  song_length="${song_length%%[[:cntrl:]]*}"
  # set title
  title="["
  title_state="${moc_info#* }" #%state
  title+="${title_state%%[[:cntrl:]]*}" #%state
  title+="] "
  title+="$file_name"
fi #if [ -z $status ]; then
# functions
function sanatize () {
  local input="$1"
  # sanatizing input
  input=("${input//</&lt;}")
  input=("${input//&/&amp;}")
  input=("${input//>/&gt;}")
  input=("${input//\"/&quot;}")
  input=("${input//\'/&apos;}")
  input=("${input//_/__}")
  echo "$input" ;}
function menu_id () { if [ -z "$id_number" ]; then id_number=0; else ((id_number++)); fi ;}
function mcall () {
  menu_id
  local label="$(sanatize $1)"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo '<menu id="'$script_name'_menu_id_'$id_header'-'$id_number'" label="'$label'">' ;}
function mend () { echo '</menu>' ;}
function icall () {
  local label="$(sanatize $1)"
  if [ -z "$2" ]; then label=$label"_"; else label=("${label/$2/_$2}"); fi
  echo '<item label="'$label'"><action name="Execute"><command>' ;}
function iend () { echo '</command></action></item>' ;}
function separator () {
  if [ -z "$*" ]; then echo '<separator/>'
  else local label="$(sanatize $1)"; echo '<separator label="'$label'"/>'; fi ;}
# start of menu
echo "<openbox_pipe_menu>"
  if [[ -z $status ]]; then icall "Start MOCP" "S"; echo "$te mocp"; iend
  else separator "$title"
    if [ ! "$title_state" = "STOP" ]; then
      #controls
      icall "Play / Pause" "P"; echo "mocp -G"; iend
      icall "Next" "N"; echo "mocp -f"; iend
      icall "Back" "B"; echo "mocp -r"; iend
      icall "Stop" "S"; echo "mocp -s"; iend
      separator
      mcall "Volume" "V"
        for i in {0..90..10}; do
          icall $i ${i:0:1}; echo "mocp -v "$i; iend
        done #for i in {0..90..10}; do
        icall "Max" "M"; echo "mocp -v 100"; iend
      mend
      separator
      mcall "Song Info" "I"
        separator "File - Song - Time - Artist - Album"
        separator $file_name
        separator $song_name
        separator $song_length
        separator $artist
        separator $album
      mend
      mcall "Options"
        icall "Shuffle on"; echo "mocp -o s"; iend
        icall "Shuffle off"; echo "mocp -u s"; iend
        separator
        icall "Repeat on"; echo "mocp -o r"; iend
        icall "Repeat off"; echo "mocp -u r"; iend
        separator
        icall "AutoNext on"; echo "mocp -o n"; iend
        icall "AutoNext off"; echo "mocp -u n"; iend
      mend
    fi
    icall "Open MOCP" "O"; echo $te" mocp"; iend
    icall "Music Folder"; echo $fm $path; iend
    separator
    mcall "Kill MOC"; icall "yes"; echo "mocp -x"; iend; mend
  fi
#end of pipemenu
echo "</openbox_pipe_menu>"
exit 0
